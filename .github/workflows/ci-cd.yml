name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.9"  # Versão mínima suportada
  PYTHON_LATEST: "3.13"  # Versão mais recente para testes adicionais

jobs:
  # Job 1: Testes
  tests:
    name: "Testes Unitários"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
      fail-fast: false  # Não para se uma versão falhar
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
    
    - name: Configurar Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Configurar ambiente e instalar dependências
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Executar testes
      run: |
        chmod +x scripts/run_tests.sh
        scripts/run_tests.sh
    
    - name: Upload relatório de testes
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports-python-${{ matrix.python-version }}
        path: reports/
        retention-days: 30
    
    - name: Upload coverage para Codecov (apenas Python 3.9)
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.9' && always()
      with:
        file: reports/coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Job 2: Build e Empacotamento
  build:
    name: "Build e Empacotamento"
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
    
    - name: Configurar Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Criar pacote
      run: |
        chmod +x scripts/create_package.sh
        scripts/create_package.sh "v1.0.${{ github.run_number }}" "${{ github.run_number }}"
    
    - name: Upload pacote
      uses: actions/upload-artifact@v4
      with:
        name: war-game-package
        path: dist/war-game-*.tar.gz
        retention-days: 90

  # Job 3: Análise de Qualidade (opcional, executa em paralelo)
  quality:
    name: "Análise de Qualidade"
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
    
    - name: Configurar Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Instalar ferramentas de qualidade
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy bandit safety
    
    - name: Verificar formatação (Black)
      run: black --check --diff war/ tests/ main.py
      continue-on-error: true
    
    - name: Análise de estilo (Flake8)
      run: flake8 war/ tests/ main.py --max-line-length=88 --extend-ignore=E203,W503
      continue-on-error: true
    
    - name: Verificação de tipos (MyPy)
      run: mypy war/ --ignore-missing-imports --python-version=3.13
      continue-on-error: true
    
    - name: Análise de segurança (Bandit)
      run: bandit -r war/ -f json -o security-report.json
      continue-on-error: true
    
    - name: Verificar vulnerabilidades (Safety)
      run: safety check --json --output vulnerabilities-report.json
      continue-on-error: true
    
    - name: Upload relatórios de qualidade
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: quality-reports
        path: |
          security-report.json
          vulnerabilities-report.json
        retention-days: 30

  # Job 4: Notificação (depende de todos os outros)
  notification:
    name: "Notificação"
    runs-on: ubuntu-latest
    needs: [tests, build, quality]
    if: always()
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
    
    - name: Configurar Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Enviar notificação
      continue-on-error: true
      env:
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        FROM_EMAIL: ${{ secrets.FROM_EMAIL }}
        NOTIFICATION_EMAIL: ${{ secrets.NOTIFICATION_EMAIL }}
      run: |
        if [ -n "$NOTIFICATION_EMAIL" ] && [ -n "$FROM_EMAIL" ] && [ -n "$EMAIL_PASSWORD" ]; then
          echo "Enviando notificação por email..."
          python scripts/send_notification.py \
            --to-email "$NOTIFICATION_EMAIL" \
            --pipeline-status "${{ needs.tests.result }}-${{ needs.build.result }}-${{ needs.quality.result }}" \
            --run-number "${{ github.run_number }}" \
            --commit-sha "${{ github.sha }}" \
            --branch "${{ github.ref_name }}"
        else
          echo "Pipeline executado com sucesso!"
          echo "Status:"
          echo "  - Testes: ${{ needs.tests.result }}"
          echo "  - Build: ${{ needs.build.result }}"
          echo "  - Qualidade: ${{ needs.quality.result }}"
          echo ""
          echo "Configure os secrets para ativar notificações por email:"
          echo "  - EMAIL_PASSWORD"
          echo "  - FROM_EMAIL"
          echo "  - NOTIFICATION_EMAIL"
        fi